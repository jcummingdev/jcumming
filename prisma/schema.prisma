generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgres"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Posts {
  id String @id @default(cuid())
  postDate DateTime @default(now())
  title String
  content String @db.Text
  image String ?
  slug String ?
  catId String ?
  category PostCategories ? @relation(fields: [catId], references: [id], onDelete: Cascade)

  @@index([catId])
}

model PostCategories {
  id String @id @default(cuid())
  name String
  slug String ?
  posts Posts[]
}

model Portfolio {
  id String @id @default(cuid())

  name String
  text String @db.Text

  link String
  image String

  tech String @db.Text

  type String
}

